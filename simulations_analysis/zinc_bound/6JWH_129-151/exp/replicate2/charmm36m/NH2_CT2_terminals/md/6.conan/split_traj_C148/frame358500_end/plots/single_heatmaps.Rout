
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> library(viridis)
Loading required package: viridisLite
> library(dplyr) # data reformatting

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr) # data reformatting
> library(stringr) # string manipulation
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
✔ tibble  3.1.8     ✔ purrr   0.3.4
✔ readr   2.1.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(patchwork)
> library(gtools)
> 
> #select the residues corresponding to NPL4 zinc finger 1 
> res <- c("I129","P130","R131","Q132","K133","S134","K135","L136","C137","K138","H139",
+          "G140","D141","R142","G143","M144","C145","E146","Y147","C148","S149","P150",
+          "L151","Z152")
> # rename residue from ConAn to the corresponding one in NPL4
> seq_res <- "IPRQKSKLCKHGDRGMCEYCSPLZ"
> # split string into single residue names
> single_seq_res <- strsplit(seq_res, "")[[1]]
> #number of the starting residue
> start_res = 129
> #generate list of residue numbers
> num_res <- seq(start_res, 152, 1)
> #load the CONAN file
> prot<-read.table("../aggregate/timeline.dat",header = FALSE,fill = TRUE)
> #max column of encounters to use in the plots
> max_var=max(prot$V7)
> 
> ################
> #filter the dataset for the contacts of NPL4
> #select the useful columns res1 res2 persistence
> prot_df1<-prot%>%select(V1,V2,V5,V7)
> colnames(prot_df1)<-c("V1","V2","persistence","num_events")
> prot_df2 <- prot_df1
> #filter the residues
> #prot_df2<-prot_df1%>%filter(V1 %in% res_prot)
> #filter the contacts with persistence 20%
> #prot_df2<-prot_df2%>%filter(persistence >= 0.2)
> #renumber and rename residues
> prot_df2$seq2 = prot_df2$V2
> prot_df2$seq1 = prot_df2$V1
> prot_df2$V2 <- single_seq_res[prot_df2$V2]
> prot_df2$V1 <- single_seq_res[prot_df2$V1]
> prot_df2$seq2 <- num_res[prot_df2$seq2]
> prot_df2$seq1 <- num_res[prot_df2$seq1]
> prot_df2$x <- paste(prot_df2$V2,prot_df2$seq2, sep = "")
> prot_df2$y <- paste(prot_df2$V1,prot_df2$seq1, sep = "")
> prot_df3 <- prot_df2[ -c(1,2,5,6) ]
> #generate final dataframe
> final_prot_df <- prot_df3[, c(4, 3, 1, 2)]
> colnames(final_prot_df)<-c("residue","residue","Occurrence", "Num. contact events")
> #write a csv with final values
> write.csv(final_prot_df, "prot_conan_contact.csv",row.names = F)
> 
> #single residue heatmaps  
> colnames(final_prot_df)<-c("V1","V2","V5", "V7")
> for(var in res)
+ {
+   d = subset(final_prot_df, V1 == var)
+   d2 <- d
+   d2[d2 == 0] <- NA
+   d3 <- d2[!is.na(d2$V5), ]
+   level_order <- factor(d3$V2)
+   plot1 <- ggplot(d3, aes(x = factor(V1), y = factor(V2, level_order), fill = as.numeric(V5))) + geom_tile() + scale_fill_viridis(begin =0, end =1, option = "viridis", direction = -1, limits=c(0, 1)) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12), axis.text.y=element_text(color="black",size=8)) + xlab("residue") + ylab("residue") + labs(fill='Occurrence')
+   plot2 <- ggplot(d3, aes(x = factor(V1), y = factor(V2, level_order), fill = as.numeric(V7))) + geom_tile() + scale_fill_viridis(begin =0, end =1, option = "magma", direction = -1, limits=c(0, max_var)) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12), axis.text.y=element_text(color="black",size=8)) + xlab("residue") + ylab("residue") + labs(fill='Num. of contact formation')
+   pdf(paste("Heatmap", var,"pdf", sep="."))
+   require(gridExtra)
+   #plot1 + labs(x = "residue", y = "residue", fill = "Persistence during time")
+   grid.arrange(plot1, plot2, ncol=2)
+   dev.off()
+ }
Loading required package: gridExtra

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> 
> proc.time()
   user  system elapsed 
  8.732   0.391  13.219 
